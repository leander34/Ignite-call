// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String             @id @default(uuid())
  username       String             @unique
  name           String
  email          String?            @unique
  email_verified DateTime?
  avatar_url     String?
  bio            String? // @db.Text
  created_at     DateTime           @default(now())
  accounts       Account[]
  sessions       Session[]
  timeIntervals  UserTimeInterval[]
  schedulings    Scheduling[]

  @@map("users")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String  @map("user_id")
  type                String
  provider            String
  provider_account_id String  @map("provider_account_id")
  refresh_token       String? // @db.Text
  access_token        String? // @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? // @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid())
  user_id       String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  session_token String   @unique
  expires       DateTime

  @@index([user_id])
  @@map("sessions")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  user_id               String
  user                  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int

  @@index([user_id])
  @@map("user_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  user_id      String
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  date         DateTime
  name         String
  email        String
  observations String?

  created_at DateTime @default(now())

  @@index([user_id])
  @@map("schedulings")
}
